image: gableroux/unity3d:2020.1.5f1

stages:
  - build_and_test
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: TownWorldWiki
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  GIT_SUBMODULE_STRATEGY: recursive

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - Library/

# run this job when you need to request a license
# you may need to follow activation steps from documentation
#get-activation-file:
#  tags:
#    - dedicated
#  when: manual
#  stage: build_and_test
#  script:
#    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
#  artifacts:
#    paths:
#      - $UNITY_ACTIVATION_FILE
#    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.test: &test
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    paths:
      - $(pwd)/$TEST_PLATFORM-results.xml
      - $(pwd)/$TEST_PLATFORM-coverage/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - dedicated
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode  
  only:
    - never
    
test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode  
  only:
    - never
    
.build: &build
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - ./Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - dedicated

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64
  tags:
    - dedicated

build-StandaloneLinux64-il2cpp:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-linux-il2cpp
  variables:
    BUILD_TARGET: StandaloneLinux64
    SCRIPTING_BACKEND: IL2CPP
    # https://forum.unity.com/threads/linux-il2cpp-linux-sysroot-not-specified-or-does-not-exist.854008/
    IL2CPP_ADDITIONAL_ARGS: "--sysroot-path=/ --tool-chain-path=/"  

build-StandaloneOSX:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-mac
  variables:
    BUILD_TARGET: StandaloneOSX  
  only:
    - never
    
#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal

build-StandaloneWindows64:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-windows
  variables:
    BUILD_TARGET: StandaloneWindows64 

build-WebGL:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-webgl
  variables:
    BUILD_TARGET: WebGL  

build-android:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-android
  variables:
    BUILD_TARGET: Android
    BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
    BUILD_APP_BUNDLE: "false"  
  only:
    - never
    
#deploy-android:
#  stage: deploy
#  image: ruby
#  script: 
#    - cd ./Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

build-ios-xcode:
  <<: *build
  image: gableroux/unity3d:2020.1.4f1-ios
  variables:
    BUILD_TARGET: iOS  
  only:
    - never
    
#build-and-deploy-ios:
#  stage: deploy
#  script:
#    - cd ./Builds/iOS/$BUILD_NAME
#    - pod install
#    - fastlane ios beta
#  tags:
#    - ios
#    - mac
#  needs: ["build-ios-xcode"]

pages:
  image: alpine:latest
  stage: deploy
  script:
    - mv "./Builds/WebGL/${BUILD_NAME}" public
  artifacts:
    paths:
      - public
  only:
    - never
  tags:
    - dedicated